/**
 * Generated from platform:/resource/hu.prolan.viatra.query/src/hu/prolan/viatra/query/TestQueryClass.vql
 */
package hu.prolan.viatra.query;

import hu.prolan.viatra.query.util.WebQuerySpecification;
import java.util.Arrays;
import java.util.List;
import model.model.TestModelClass;
import org.eclipse.viatra.query.runtime.api.IPatternMatch;
import org.eclipse.viatra.query.runtime.api.impl.BasePatternMatch;
import org.eclipse.viatra.query.runtime.exception.ViatraQueryException;

/**
 * Pattern-specific match representation of the hu.prolan.viatra.query.web pattern,
 * to be used in conjunction with {@link WebMatcher}.
 * 
 * <p>Class fields correspond to parameters of the pattern. Fields with value null are considered unassigned.
 * Each instance is a (possibly partial) substitution of pattern parameters,
 * usable to represent a match of the pattern in the result of a query,
 * or to specify the bound (fixed) input parameters when issuing a query.
 * 
 * @see WebMatcher
 * @see WebProcessor
 * 
 */
@SuppressWarnings("all")
public abstract class WebMatch extends BasePatternMatch {
  private TestModelClass fW;
  
  private static List<String> parameterNames = makeImmutableList("W");
  
  private WebMatch(final TestModelClass pW) {
    this.fW = pW;
  }
  
  @Override
  public Object get(final String parameterName) {
    if ("W".equals(parameterName)) return this.fW;
    return null;
  }
  
  public TestModelClass getW() {
    return this.fW;
  }
  
  @Override
  public boolean set(final String parameterName, final Object newValue) {
    if (!isMutable()) throw new java.lang.UnsupportedOperationException();
    if ("W".equals(parameterName) ) {
        this.fW = (TestModelClass) newValue;
        return true;
    }
    return false;
  }
  
  public void setW(final TestModelClass pW) {
    if (!isMutable()) throw new java.lang.UnsupportedOperationException();
    this.fW = pW;
  }
  
  @Override
  public String patternName() {
    return "hu.prolan.viatra.query.web";
  }
  
  @Override
  public List<String> parameterNames() {
    return WebMatch.parameterNames;
  }
  
  @Override
  public Object[] toArray() {
    return new Object[]{fW};
  }
  
  @Override
  public WebMatch toImmutable() {
    return isMutable() ? newMatch(fW) : this;
  }
  
  @Override
  public String prettyPrint() {
    StringBuilder result = new StringBuilder();
    result.append("\"W\"=" + prettyPrintValue(fW)
    );
    return result.toString();
  }
  
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((fW == null) ? 0 : fW.hashCode());
    return result;
  }
  
  @Override
  public boolean equals(final Object obj) {
    if (this == obj)
        return true;
    if (!(obj instanceof WebMatch)) { // this should be infrequent
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof IPatternMatch)) {
            return false;
        }
        IPatternMatch otherSig  = (IPatternMatch) obj;
        if (!specification().equals(otherSig.specification()))
            return false;
        return Arrays.deepEquals(toArray(), otherSig.toArray());
    }
    WebMatch other = (WebMatch) obj;
    if (fW == null) {if (other.fW != null) return false;}
    else if (!fW.equals(other.fW)) return false;
    return true;
  }
  
  @Override
  public WebQuerySpecification specification() {
    try {
        return WebQuerySpecification.instance();
    } catch (ViatraQueryException ex) {
         // This cannot happen, as the match object can only be instantiated if the query specification exists
         throw new IllegalStateException (ex);
    }
  }
  
  /**
   * Returns an empty, mutable match.
   * Fields of the mutable match can be filled to create a partial match, usable as matcher input.
   * 
   * @return the empty match.
   * 
   */
  public static WebMatch newEmptyMatch() {
    return new Mutable(null);
  }
  
  /**
   * Returns a mutable (partial) match.
   * Fields of the mutable match can be filled to create a partial match, usable as matcher input.
   * 
   * @param pW the fixed value of pattern parameter W, or null if not bound.
   * @return the new, mutable (partial) match object.
   * 
   */
  public static WebMatch newMutableMatch(final TestModelClass pW) {
    return new Mutable(pW);
  }
  
  /**
   * Returns a new (partial) match.
   * This can be used e.g. to call the matcher with a partial match.
   * <p>The returned match will be immutable. Use {@link #newEmptyMatch()} to obtain a mutable match object.
   * @param pW the fixed value of pattern parameter W, or null if not bound.
   * @return the (partial) match object.
   * 
   */
  public static WebMatch newMatch(final TestModelClass pW) {
    return new Immutable(pW);
  }
  
  private static final class Mutable extends WebMatch {
    Mutable(final TestModelClass pW) {
      super(pW);
    }
    
    @Override
    public boolean isMutable() {
      return true;
    }
  }
  
  private static final class Immutable extends WebMatch {
    Immutable(final TestModelClass pW) {
      super(pW);
    }
    
    @Override
    public boolean isMutable() {
      return false;
    }
  }
}
